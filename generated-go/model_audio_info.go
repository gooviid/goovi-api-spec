/*
GOOVE

GOOVI API Design Spec

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AudioInfo struct for AudioInfo
type AudioInfo struct {
	Bitrate *string `json:"bitrate,omitempty"`
	Frequency *string `json:"frequency,omitempty"`
	Type *string `json:"type,omitempty"`
	ChannelNumber *int32 `json:"channel_number,omitempty"`
	ChannelName *string `json:"channel_name,omitempty"`
	Duration *float32 `json:"duration,omitempty"`
	AudioChannel *float32 `json:"audio_channel,omitempty"`
}

// NewAudioInfo instantiates a new AudioInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudioInfo() *AudioInfo {
	this := AudioInfo{}
	return &this
}

// NewAudioInfoWithDefaults instantiates a new AudioInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudioInfoWithDefaults() *AudioInfo {
	this := AudioInfo{}
	return &this
}

// GetBitrate returns the Bitrate field value if set, zero value otherwise.
func (o *AudioInfo) GetBitrate() string {
	if o == nil || o.Bitrate == nil {
		var ret string
		return ret
	}
	return *o.Bitrate
}

// GetBitrateOk returns a tuple with the Bitrate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioInfo) GetBitrateOk() (*string, bool) {
	if o == nil || o.Bitrate == nil {
		return nil, false
	}
	return o.Bitrate, true
}

// HasBitrate returns a boolean if a field has been set.
func (o *AudioInfo) HasBitrate() bool {
	if o != nil && o.Bitrate != nil {
		return true
	}

	return false
}

// SetBitrate gets a reference to the given string and assigns it to the Bitrate field.
func (o *AudioInfo) SetBitrate(v string) {
	o.Bitrate = &v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *AudioInfo) GetFrequency() string {
	if o == nil || o.Frequency == nil {
		var ret string
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioInfo) GetFrequencyOk() (*string, bool) {
	if o == nil || o.Frequency == nil {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *AudioInfo) HasFrequency() bool {
	if o != nil && o.Frequency != nil {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given string and assigns it to the Frequency field.
func (o *AudioInfo) SetFrequency(v string) {
	o.Frequency = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AudioInfo) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioInfo) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AudioInfo) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AudioInfo) SetType(v string) {
	o.Type = &v
}

// GetChannelNumber returns the ChannelNumber field value if set, zero value otherwise.
func (o *AudioInfo) GetChannelNumber() int32 {
	if o == nil || o.ChannelNumber == nil {
		var ret int32
		return ret
	}
	return *o.ChannelNumber
}

// GetChannelNumberOk returns a tuple with the ChannelNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioInfo) GetChannelNumberOk() (*int32, bool) {
	if o == nil || o.ChannelNumber == nil {
		return nil, false
	}
	return o.ChannelNumber, true
}

// HasChannelNumber returns a boolean if a field has been set.
func (o *AudioInfo) HasChannelNumber() bool {
	if o != nil && o.ChannelNumber != nil {
		return true
	}

	return false
}

// SetChannelNumber gets a reference to the given int32 and assigns it to the ChannelNumber field.
func (o *AudioInfo) SetChannelNumber(v int32) {
	o.ChannelNumber = &v
}

// GetChannelName returns the ChannelName field value if set, zero value otherwise.
func (o *AudioInfo) GetChannelName() string {
	if o == nil || o.ChannelName == nil {
		var ret string
		return ret
	}
	return *o.ChannelName
}

// GetChannelNameOk returns a tuple with the ChannelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioInfo) GetChannelNameOk() (*string, bool) {
	if o == nil || o.ChannelName == nil {
		return nil, false
	}
	return o.ChannelName, true
}

// HasChannelName returns a boolean if a field has been set.
func (o *AudioInfo) HasChannelName() bool {
	if o != nil && o.ChannelName != nil {
		return true
	}

	return false
}

// SetChannelName gets a reference to the given string and assigns it to the ChannelName field.
func (o *AudioInfo) SetChannelName(v string) {
	o.ChannelName = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *AudioInfo) GetDuration() float32 {
	if o == nil || o.Duration == nil {
		var ret float32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioInfo) GetDurationOk() (*float32, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *AudioInfo) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given float32 and assigns it to the Duration field.
func (o *AudioInfo) SetDuration(v float32) {
	o.Duration = &v
}

// GetAudioChannel returns the AudioChannel field value if set, zero value otherwise.
func (o *AudioInfo) GetAudioChannel() float32 {
	if o == nil || o.AudioChannel == nil {
		var ret float32
		return ret
	}
	return *o.AudioChannel
}

// GetAudioChannelOk returns a tuple with the AudioChannel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioInfo) GetAudioChannelOk() (*float32, bool) {
	if o == nil || o.AudioChannel == nil {
		return nil, false
	}
	return o.AudioChannel, true
}

// HasAudioChannel returns a boolean if a field has been set.
func (o *AudioInfo) HasAudioChannel() bool {
	if o != nil && o.AudioChannel != nil {
		return true
	}

	return false
}

// SetAudioChannel gets a reference to the given float32 and assigns it to the AudioChannel field.
func (o *AudioInfo) SetAudioChannel(v float32) {
	o.AudioChannel = &v
}

func (o AudioInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Bitrate != nil {
		toSerialize["bitrate"] = o.Bitrate
	}
	if o.Frequency != nil {
		toSerialize["frequency"] = o.Frequency
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.ChannelNumber != nil {
		toSerialize["channel_number"] = o.ChannelNumber
	}
	if o.ChannelName != nil {
		toSerialize["channel_name"] = o.ChannelName
	}
	if o.Duration != nil {
		toSerialize["duration"] = o.Duration
	}
	if o.AudioChannel != nil {
		toSerialize["audio_channel"] = o.AudioChannel
	}
	return json.Marshal(toSerialize)
}

type NullableAudioInfo struct {
	value *AudioInfo
	isSet bool
}

func (v NullableAudioInfo) Get() *AudioInfo {
	return v.value
}

func (v *NullableAudioInfo) Set(val *AudioInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAudioInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAudioInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudioInfo(val *AudioInfo) *NullableAudioInfo {
	return &NullableAudioInfo{value: val, isSet: true}
}

func (v NullableAudioInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudioInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


