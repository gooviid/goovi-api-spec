/*
GOOVE

GOOVI API Design Spec

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateCompress struct for CreateCompress
type CreateCompress struct {
	MerchantGivenId *string `json:"merchant_given_id,omitempty"`
	CallbackUrl NullableString `json:"callback_url,omitempty"`
	Source *SourceTranscode `json:"source,omitempty"`
	Destination *SourceTranscode `json:"destination,omitempty"`
}

// NewCreateCompress instantiates a new CreateCompress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCompress() *CreateCompress {
	this := CreateCompress{}
	return &this
}

// NewCreateCompressWithDefaults instantiates a new CreateCompress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCompressWithDefaults() *CreateCompress {
	this := CreateCompress{}
	return &this
}

// GetMerchantGivenId returns the MerchantGivenId field value if set, zero value otherwise.
func (o *CreateCompress) GetMerchantGivenId() string {
	if o == nil || o.MerchantGivenId == nil {
		var ret string
		return ret
	}
	return *o.MerchantGivenId
}

// GetMerchantGivenIdOk returns a tuple with the MerchantGivenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCompress) GetMerchantGivenIdOk() (*string, bool) {
	if o == nil || o.MerchantGivenId == nil {
		return nil, false
	}
	return o.MerchantGivenId, true
}

// HasMerchantGivenId returns a boolean if a field has been set.
func (o *CreateCompress) HasMerchantGivenId() bool {
	if o != nil && o.MerchantGivenId != nil {
		return true
	}

	return false
}

// SetMerchantGivenId gets a reference to the given string and assigns it to the MerchantGivenId field.
func (o *CreateCompress) SetMerchantGivenId(v string) {
	o.MerchantGivenId = &v
}

// GetCallbackUrl returns the CallbackUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateCompress) GetCallbackUrl() string {
	if o == nil || o.CallbackUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.CallbackUrl.Get()
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateCompress) GetCallbackUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CallbackUrl.Get(), o.CallbackUrl.IsSet()
}

// HasCallbackUrl returns a boolean if a field has been set.
func (o *CreateCompress) HasCallbackUrl() bool {
	if o != nil && o.CallbackUrl.IsSet() {
		return true
	}

	return false
}

// SetCallbackUrl gets a reference to the given NullableString and assigns it to the CallbackUrl field.
func (o *CreateCompress) SetCallbackUrl(v string) {
	o.CallbackUrl.Set(&v)
}
// SetCallbackUrlNil sets the value for CallbackUrl to be an explicit nil
func (o *CreateCompress) SetCallbackUrlNil() {
	o.CallbackUrl.Set(nil)
}

// UnsetCallbackUrl ensures that no value is present for CallbackUrl, not even an explicit nil
func (o *CreateCompress) UnsetCallbackUrl() {
	o.CallbackUrl.Unset()
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *CreateCompress) GetSource() SourceTranscode {
	if o == nil || o.Source == nil {
		var ret SourceTranscode
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCompress) GetSourceOk() (*SourceTranscode, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *CreateCompress) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given SourceTranscode and assigns it to the Source field.
func (o *CreateCompress) SetSource(v SourceTranscode) {
	o.Source = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *CreateCompress) GetDestination() SourceTranscode {
	if o == nil || o.Destination == nil {
		var ret SourceTranscode
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCompress) GetDestinationOk() (*SourceTranscode, bool) {
	if o == nil || o.Destination == nil {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *CreateCompress) HasDestination() bool {
	if o != nil && o.Destination != nil {
		return true
	}

	return false
}

// SetDestination gets a reference to the given SourceTranscode and assigns it to the Destination field.
func (o *CreateCompress) SetDestination(v SourceTranscode) {
	o.Destination = &v
}

func (o CreateCompress) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MerchantGivenId != nil {
		toSerialize["merchant_given_id"] = o.MerchantGivenId
	}
	if o.CallbackUrl.IsSet() {
		toSerialize["callback_url"] = o.CallbackUrl.Get()
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.Destination != nil {
		toSerialize["destination"] = o.Destination
	}
	return json.Marshal(toSerialize)
}

type NullableCreateCompress struct {
	value *CreateCompress
	isSet bool
}

func (v NullableCreateCompress) Get() *CreateCompress {
	return v.value
}

func (v *NullableCreateCompress) Set(val *CreateCompress) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCompress) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCompress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCompress(val *CreateCompress) *NullableCreateCompress {
	return &NullableCreateCompress{value: val, isSet: true}
}

func (v NullableCreateCompress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCompress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


