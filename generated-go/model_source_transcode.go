/*
GOOVE

GOOVI API Design Spec

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SourceTranscode struct for SourceTranscode
type SourceTranscode struct {
	Url *string `json:"url,omitempty"`
	AccessKeyId *string `json:"access_key_id,omitempty"`
	AccessKeySecret *string `json:"access_key_secret,omitempty"`
}

// NewSourceTranscode instantiates a new SourceTranscode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceTranscode() *SourceTranscode {
	this := SourceTranscode{}
	return &this
}

// NewSourceTranscodeWithDefaults instantiates a new SourceTranscode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceTranscodeWithDefaults() *SourceTranscode {
	this := SourceTranscode{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *SourceTranscode) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceTranscode) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *SourceTranscode) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *SourceTranscode) SetUrl(v string) {
	o.Url = &v
}

// GetAccessKeyId returns the AccessKeyId field value if set, zero value otherwise.
func (o *SourceTranscode) GetAccessKeyId() string {
	if o == nil || o.AccessKeyId == nil {
		var ret string
		return ret
	}
	return *o.AccessKeyId
}

// GetAccessKeyIdOk returns a tuple with the AccessKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceTranscode) GetAccessKeyIdOk() (*string, bool) {
	if o == nil || o.AccessKeyId == nil {
		return nil, false
	}
	return o.AccessKeyId, true
}

// HasAccessKeyId returns a boolean if a field has been set.
func (o *SourceTranscode) HasAccessKeyId() bool {
	if o != nil && o.AccessKeyId != nil {
		return true
	}

	return false
}

// SetAccessKeyId gets a reference to the given string and assigns it to the AccessKeyId field.
func (o *SourceTranscode) SetAccessKeyId(v string) {
	o.AccessKeyId = &v
}

// GetAccessKeySecret returns the AccessKeySecret field value if set, zero value otherwise.
func (o *SourceTranscode) GetAccessKeySecret() string {
	if o == nil || o.AccessKeySecret == nil {
		var ret string
		return ret
	}
	return *o.AccessKeySecret
}

// GetAccessKeySecretOk returns a tuple with the AccessKeySecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceTranscode) GetAccessKeySecretOk() (*string, bool) {
	if o == nil || o.AccessKeySecret == nil {
		return nil, false
	}
	return o.AccessKeySecret, true
}

// HasAccessKeySecret returns a boolean if a field has been set.
func (o *SourceTranscode) HasAccessKeySecret() bool {
	if o != nil && o.AccessKeySecret != nil {
		return true
	}

	return false
}

// SetAccessKeySecret gets a reference to the given string and assigns it to the AccessKeySecret field.
func (o *SourceTranscode) SetAccessKeySecret(v string) {
	o.AccessKeySecret = &v
}

func (o SourceTranscode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.AccessKeyId != nil {
		toSerialize["access_key_id"] = o.AccessKeyId
	}
	if o.AccessKeySecret != nil {
		toSerialize["access_key_secret"] = o.AccessKeySecret
	}
	return json.Marshal(toSerialize)
}

type NullableSourceTranscode struct {
	value *SourceTranscode
	isSet bool
}

func (v NullableSourceTranscode) Get() *SourceTranscode {
	return v.value
}

func (v *NullableSourceTranscode) Set(val *SourceTranscode) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceTranscode) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceTranscode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceTranscode(val *SourceTranscode) *NullableSourceTranscode {
	return &NullableSourceTranscode{value: val, isSet: true}
}

func (v NullableSourceTranscode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceTranscode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


