/*
GOOVE

GOOVI API Design Spec

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BillingDetail struct for BillingDetail
type BillingDetail struct {
	Qty *int32 `json:"qty,omitempty"`
	Method *string `json:"method,omitempty"`
	Total *float32 `json:"total,omitempty"`
	Price *float32 `json:"price,omitempty"`
}

// NewBillingDetail instantiates a new BillingDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingDetail() *BillingDetail {
	this := BillingDetail{}
	return &this
}

// NewBillingDetailWithDefaults instantiates a new BillingDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingDetailWithDefaults() *BillingDetail {
	this := BillingDetail{}
	return &this
}

// GetQty returns the Qty field value if set, zero value otherwise.
func (o *BillingDetail) GetQty() int32 {
	if o == nil || o.Qty == nil {
		var ret int32
		return ret
	}
	return *o.Qty
}

// GetQtyOk returns a tuple with the Qty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingDetail) GetQtyOk() (*int32, bool) {
	if o == nil || o.Qty == nil {
		return nil, false
	}
	return o.Qty, true
}

// HasQty returns a boolean if a field has been set.
func (o *BillingDetail) HasQty() bool {
	if o != nil && o.Qty != nil {
		return true
	}

	return false
}

// SetQty gets a reference to the given int32 and assigns it to the Qty field.
func (o *BillingDetail) SetQty(v int32) {
	o.Qty = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *BillingDetail) GetMethod() string {
	if o == nil || o.Method == nil {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingDetail) GetMethodOk() (*string, bool) {
	if o == nil || o.Method == nil {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *BillingDetail) HasMethod() bool {
	if o != nil && o.Method != nil {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *BillingDetail) SetMethod(v string) {
	o.Method = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *BillingDetail) GetTotal() float32 {
	if o == nil || o.Total == nil {
		var ret float32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingDetail) GetTotalOk() (*float32, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *BillingDetail) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float32 and assigns it to the Total field.
func (o *BillingDetail) SetTotal(v float32) {
	o.Total = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *BillingDetail) GetPrice() float32 {
	if o == nil || o.Price == nil {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingDetail) GetPriceOk() (*float32, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *BillingDetail) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *BillingDetail) SetPrice(v float32) {
	o.Price = &v
}

func (o BillingDetail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Qty != nil {
		toSerialize["qty"] = o.Qty
	}
	if o.Method != nil {
		toSerialize["method"] = o.Method
	}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	return json.Marshal(toSerialize)
}

type NullableBillingDetail struct {
	value *BillingDetail
	isSet bool
}

func (v NullableBillingDetail) Get() *BillingDetail {
	return v.value
}

func (v *NullableBillingDetail) Set(val *BillingDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingDetail(val *BillingDetail) *NullableBillingDetail {
	return &NullableBillingDetail{value: val, isSet: true}
}

func (v NullableBillingDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


