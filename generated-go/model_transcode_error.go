/*
GOOVE

GOOVI API Design Spec

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// TranscodeError struct for TranscodeError
type TranscodeError struct {
	ErrorType *string `json:"error_type,omitempty"`
	ErrorCause *string `json:"error_cause,omitempty"`
	ErrorAt *time.Time `json:"error_at,omitempty"`
}

// NewTranscodeError instantiates a new TranscodeError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranscodeError() *TranscodeError {
	this := TranscodeError{}
	return &this
}

// NewTranscodeErrorWithDefaults instantiates a new TranscodeError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranscodeErrorWithDefaults() *TranscodeError {
	this := TranscodeError{}
	return &this
}

// GetErrorType returns the ErrorType field value if set, zero value otherwise.
func (o *TranscodeError) GetErrorType() string {
	if o == nil || o.ErrorType == nil {
		var ret string
		return ret
	}
	return *o.ErrorType
}

// GetErrorTypeOk returns a tuple with the ErrorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscodeError) GetErrorTypeOk() (*string, bool) {
	if o == nil || o.ErrorType == nil {
		return nil, false
	}
	return o.ErrorType, true
}

// HasErrorType returns a boolean if a field has been set.
func (o *TranscodeError) HasErrorType() bool {
	if o != nil && o.ErrorType != nil {
		return true
	}

	return false
}

// SetErrorType gets a reference to the given string and assigns it to the ErrorType field.
func (o *TranscodeError) SetErrorType(v string) {
	o.ErrorType = &v
}

// GetErrorCause returns the ErrorCause field value if set, zero value otherwise.
func (o *TranscodeError) GetErrorCause() string {
	if o == nil || o.ErrorCause == nil {
		var ret string
		return ret
	}
	return *o.ErrorCause
}

// GetErrorCauseOk returns a tuple with the ErrorCause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscodeError) GetErrorCauseOk() (*string, bool) {
	if o == nil || o.ErrorCause == nil {
		return nil, false
	}
	return o.ErrorCause, true
}

// HasErrorCause returns a boolean if a field has been set.
func (o *TranscodeError) HasErrorCause() bool {
	if o != nil && o.ErrorCause != nil {
		return true
	}

	return false
}

// SetErrorCause gets a reference to the given string and assigns it to the ErrorCause field.
func (o *TranscodeError) SetErrorCause(v string) {
	o.ErrorCause = &v
}

// GetErrorAt returns the ErrorAt field value if set, zero value otherwise.
func (o *TranscodeError) GetErrorAt() time.Time {
	if o == nil || o.ErrorAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ErrorAt
}

// GetErrorAtOk returns a tuple with the ErrorAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranscodeError) GetErrorAtOk() (*time.Time, bool) {
	if o == nil || o.ErrorAt == nil {
		return nil, false
	}
	return o.ErrorAt, true
}

// HasErrorAt returns a boolean if a field has been set.
func (o *TranscodeError) HasErrorAt() bool {
	if o != nil && o.ErrorAt != nil {
		return true
	}

	return false
}

// SetErrorAt gets a reference to the given time.Time and assigns it to the ErrorAt field.
func (o *TranscodeError) SetErrorAt(v time.Time) {
	o.ErrorAt = &v
}

func (o TranscodeError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ErrorType != nil {
		toSerialize["error_type"] = o.ErrorType
	}
	if o.ErrorCause != nil {
		toSerialize["error_cause"] = o.ErrorCause
	}
	if o.ErrorAt != nil {
		toSerialize["error_at"] = o.ErrorAt
	}
	return json.Marshal(toSerialize)
}

type NullableTranscodeError struct {
	value *TranscodeError
	isSet bool
}

func (v NullableTranscodeError) Get() *TranscodeError {
	return v.value
}

func (v *NullableTranscodeError) Set(val *TranscodeError) {
	v.value = val
	v.isSet = true
}

func (v NullableTranscodeError) IsSet() bool {
	return v.isSet
}

func (v *NullableTranscodeError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranscodeError(val *TranscodeError) *NullableTranscodeError {
	return &NullableTranscodeError{value: val, isSet: true}
}

func (v NullableTranscodeError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranscodeError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


